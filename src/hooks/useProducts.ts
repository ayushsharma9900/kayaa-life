'use client';

import { useState, useEffect } from 'react';
import { Product } from '@/types';
import { products as initialProducts } from '@/data/products';

export function useProducts() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  // Initialize products from data file
  useEffect(() => {
    // In a real app, this would fetch from an API
    setProducts(initialProducts);
    setLoading(false);
  }, []);

  // Add a new product
  const addProduct = (product: Product) => {
    const newProduct = {
      ...product,
      id: Date.now().toString(), // In real app, this would be generated by the backend
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setProducts(prev => [...prev, newProduct]);
    return newProduct;
  };

  // Update an existing product
  const updateProduct = (updatedProduct: Product) => {
    setProducts(prev => 
      prev.map(product => 
        product.id === updatedProduct.id 
          ? { ...updatedProduct, updatedAt: new Date() }
          : product
      )
    );
    return updatedProduct;
  };

  // Delete a product
  const deleteProduct = (productId: string) => {
    setProducts(prev => prev.filter(product => product.id !== productId));
    return true;
  };

  // Get a single product by ID
  const getProduct = (productId: string) => {
    return products.find(product => product.id === productId);
  };

  // Save product (add if new, update if existing)
  const saveProduct = (product: Product) => {
    const existingProduct = products.find(p => p.id === product.id);
    if (existingProduct) {
      return updateProduct(product);
    } else {
      return addProduct(product);
    }
  };

  return {
    products,
    loading,
    addProduct,
    updateProduct,
    deleteProduct,
    getProduct,
    saveProduct
  };
}